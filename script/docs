#!/usr/bin/env node

var fs = require('fs')
var os = require('os')
var path = require('path')
var tar = require('tar-fs')
var gunzip = require('gunzip-maybe')
var mkdir = require('mkdirp')
var nugget = require('nugget')
var request = require('request')
var tmp = require('tmp')
var cpr = require('cpr')
var through = require('through2')
var rimraf = require('rimraf')
var yaml = require('yamljs')
var toTitleCase = require('titlecase')

var formatInternalLinks = require('../lib/doc-links.js')
var jekyllConfigFile = path.join(process.cwd(), '_config.yml')
var jekyllConfig = yaml.load(jekyllConfigFile)
var token = process.env.ATOM_ACCESS_TOKEN
var tarballFilename = 'electron.tar.gz'
var tmpDir = tmp.dirSync().name
var newDir
var tarballUrl
var version

var fetchDocs = module.exports = function fetchDocs (callback) {
  var latest = 'https://api.github.com/repos/electron/electron/releases/latest'
  request.get({url: latest, json: true, headers: {'user-agent': 'electron website build'}}, function (err, resp, body) {
    if (err) throw err
    tarballUrl = body.tarball_url
    version = tarballUrl.split('/').pop()
    return updateVersions(callback)
  })
}

function updateVersions (callback) {
  console.log(`Latest release is ${version}. Updating _config.yml`)
  jekyllConfig.latest_version = version
  if (jekyllConfig.available_versions.indexOf(version) === -1) {
    jekyllConfig.available_versions.push(version)
  }
  fs.writeFileSync(jekyllConfigFile, yaml.stringify(jekyllConfig))
  return downloadTarball(callback)
}

function downloadTarball (callback) {
  console.log(`Tarball URL: ${tarballUrl}`)
  var opts = {
    headers: {
      'user-agent': 'Electron',
      'Authorization': 'token ' + token
    },
    target: tarballFilename,
    dir: tmpDir,
    verbose: true
  }

  nugget(tarballUrl, opts, function (error) {
    if (error) return callback(error)
    extractDocs(callback)
  })
}

// Extract specific 'docs' directories from within
// tarball, then prepend each markdown file with
// Jekyll front matter
function extractDocs (callback) {
  var tarball = path.join(tmpDir, tarballFilename)

  var extract = tar.extract(tmpDir, {
    ignore: function (name) {
      if (name.match('docs/api')) return false
      if (name.match('docs/development')) return false
      if (name.match('docs/tutorial')) return false
      return true
    },
    mapStream: function (fileStream, header) {
      var frontmatter
      if (path.extname(header.name) === '.md') {
        var metadata = constructDocMetadata(header.name)
        metadata.source_url = constructSourceUrl(header.name)
        frontmatter = new Buffer('---\n' + yaml.stringify(metadata) + '---\n\n')
        return fileStream.pipe(frontMatterify(frontmatter)).pipe(removeCmdSyntax())
      }
      return fileStream
    }
  })

  extract.on('entry', function extracting (header, stream, next) {
    var extractedElectronDir = header.name.split('/')[0]
    newDir = path.join(tmpDir, extractedElectronDir)
  })

  extract.on('finish', function extracted () {
    moveDirectories(callback)
  })

  fs.createReadStream(tarball).pipe(gunzip()).pipe(extract)
}

function frontMatterify (frontmatter) {
  var appended = false
  return through(function (obj, enc, next) {
    if (!appended) this.push(frontmatter)
    appended = true
    this.push(obj)
    next()
  })
}

function removeCmdSyntax (content) {
  return through(function (obj, enc, next) {
    var edits = obj.toString().replace('```cmd', '```bash')
    this.push(edits)
    next()
  })
}

function removeMdUrls () {
  return through(function (obj, enc, next) {
    var regex = /\.md\)/ig
    var edits = obj.toString().replace(regex, ')')
    this.push(edits)
    next()
  })
}

function constructSourceUrl (path) {
  var baseUrl = 'https://github.com/electron/electron/blob/master/'
  var source = path.split('/')
  source.splice(0, 1)
  return baseUrl + source.join('/')
}

function constructDocMetadata (filepath) {
  var pathArray = filepath.split('/').splice(2, 2)
  var redirects = jekyllConfig.available_versions.concat('latest')
    .map(function (v) {
      return `/` + filepath.split('/').splice(1).join('/')
        .replace('docs/', `docs/${v}/`).replace('.md', '/')
    })
  return {
    version: version,
    category: (pathArray[0] === 'api') ? 'API' : toTitleCase(pathArray[0]),
    title: formatDocTitle(pathArray[1]),
    redirect_from: redirects
  }
}

function formatDocTitle (filename) {
  return toTitleCase(filename.replace('.md', '').replace('-', ' '))
}

function moveDirectories (callback) {
  var sourceDir = path.join(newDir, 'docs')
  var targetDir = path.join(__dirname, '..', '_docs')

  cpr(sourceDir, targetDir, {
    overwrite: true
  }, function moved (error) {
    if (error) return callback(error)
    formatInternalLinks(targetDir, version, function fixedLinks (error, msg) {
      if (error) return callback(error)
      return callback(null, 'Done!')
    })
  })
}

if (!process.parent) {
  fetchDocs(function callback (error, message) {
    if (error) console.log(error)
    if (message) console.log(message)
  })
}
